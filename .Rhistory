set.seed(10)
library(caret)
library(corrplot)
library(kknn)
library(randomForest)
library(kernlab)
df <- read.csv("sap_io.csv")
# changing NA's to 0's.
df[is.na(df)] <- 0
# 1 = red wine, 0 = white wine
df$type = as.numeric(df$type)
str(df)
table(df$quality)
# making all of them show in one grid
for (i in c(1:14)) {
plot(df[, i], jitter(df[, "quality"]), xlab = names(df)[i],
ylab = "quality", cex = 0.8, cex.lab = 1.3)
abline(lm(df[, "quality"] ~ df[ ,i]), lty = 2, lwd = 2)
}
#max.sug <- which(df$residual.sugar == max(df$residual.sugar))
#df <- df[-max.sug, ]
#df
par(mfrow = c(1,1))
cor.df <- cor(df)
png(height = 1200, width = 1500, pointsize = 15, file = 'overlap.png')
corrplot(cor.df, method = 'number')
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
train.df <- df[inTrain,]
test.df <- df[-inTrain,]
library(e1071)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
plot(kknn.train)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
plot(kknn.train)
library(e1071)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
library(e1071)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
library(e1071)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
library(e1071)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
set.seed(10)
library(caret)
library(corrplot)
library(kknn)
library(randomForest)
library(kernlab)
df <- read.csv("sap_io.csv")
# changing NA's to 0's.
df[is.na(df)] <- 0
# 1 = red wine, 0 = white wine
df$type = as.numeric(df$type)
str(df)
table(df$quality)
# making all of them show in one grid
for (i in c(1:14)) {
plot(df[, i], jitter(df[, "quality"]), xlab = names(df)[i],
ylab = "quality", cex = 0.8, cex.lab = 1.3)
abline(lm(df[, "quality"] ~ df[ ,i]), lty = 2, lwd = 2)
}
#max.sug <- which(df$residual.sugar == max(df$residual.sugar))
#df <- df[-max.sug, ]
#df
par(mfrow = c(1,1))
cor.df <- cor(df)
png(height = 1200, width = 1500, pointsize = 15, file = 'overlap.png')
corrplot(cor.df, method = 'number')
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
train.df <- df[inTrain,]
test.df <- df[-inTrain,]
library(e1071)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
library(e1071)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
#library(e1071)
#t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
#kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
#                         kernel = c("rectangular", "gaussian", "cos"))
#kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
#                    trControl = t.ctrl, tuneGrid = kknn.grid,
#                    preProcess = c("center", "scale"))
#plot(kknn.train)
svm.grid <- expand.grid(C = 2^(1:3), sigma = seq(0.25, 2, length = 8))
svm.train <- train(quality ~ ., data = train.df, method = "svmRadial",
trControl = t.ctrl, tuneGrid = svm.grid,
preProcess = c("center", "scale"))
library(e1071)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
library(e1071)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
set.seed(10)
library(caret)
library(corrplot)
library(kknn)
library(randomForest)
library(kernlab)
df <- read.csv("sap_io.csv")
# changing NA's to 0's.
df[is.na(df)] <- 0
# 1 = red wine, 0 = white wine
df$type = as.numeric(df$type)
str(df)
table(df$quality)
# making all of them show in one grid
for (i in c(1:14)) {
plot(df[, i], jitter(df[, "quality"]), xlab = names(df)[i],
ylab = "quality", cex = 0.8, cex.lab = 1.3)
abline(lm(df[, "quality"] ~ df[ ,i]), lty = 2, lwd = 2)
}
#max.sug <- which(df$residual.sugar == max(df$residual.sugar))
#df <- df[-max.sug, ]
#df
par(mfrow = c(1,1))
cor.df <- cor(df)
png(height = 1200, width = 1500, pointsize = 15, file = 'overlap.png')
corrplot(cor.df, method = 'number')
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
train.df <- df[inTrain,]
test.df <- df[-inTrain,]
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
train.df <- df[inTrain,]
test.df <- df[-inTrain,]
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
train.df <- df[inTrain,]
test.df <- df[-inTrain,]
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
train.df <- df[inTrain,]
test.df <- df[-inTrain,]
print(1)
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
train.df <- df[inTrain,]
test.df <- df[-inTrain,]
library(e1071)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
library(e1071)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
set.seed(10)
library(caret)
library(corrplot)
library(kknn)
library(randomForest)
library(kernlab)
df <- read.csv("sap_io.csv")
# changing NA's to 0's.
df[is.na(df)] <- 0
# 1 = red wine, 0 = white wine
df$type = as.numeric(df$type)
str(df)
table(df$quality)
# making all of them show in one grid
for (i in c(1:14)) {
plot(df[, i], jitter(df[, "quality"]), xlab = names(df)[i],
ylab = "quality", cex = 0.8, cex.lab = 1.3)
abline(lm(df[, "quality"] ~ df[ ,i]), lty = 2, lwd = 2)
}
#max.sug <- which(df$residual.sugar == max(df$residual.sugar))
#df <- df[-max.sug, ]
#df
par(mfrow = c(1,1))
cor.df <- cor(df)
png(height = 1200, width = 1500, pointsize = 15, file = 'overlap.png')
corrplot(cor.df, method = 'number')
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
train.df <- df[inTrain,]
test.df <- df[-inTrain,]
print(train.df)
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
train.df <- df[inTrain,]
test.df <- df[-inTrain,]
print(inTrain)
df$quality <- as.factor(df$quality)
inTrain <- createDataPartition(df$quality, p = 2/3, list = F)
train.df <- df[inTrain,]
test.df <- df[-inTrain,]
#library(e1071)
#t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
#
#kknn.grid <- expand.grid(kmax = c(6, 8, 10 ,12, 14), distance = c(1, 2),
#                         kernel = c("rectangular", "gaussian", "cos"))
#
#kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
#                    trControl = t.ctrl, tuneGrid = kknn.grid,
#                    preProcess = c("center", "scale"))
#plot(kknn.train)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.white, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
#library(e1071)
#t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
#
#kknn.grid <- expand.grid(kmax = c(6, 8, 10 ,12, 14), distance = c(1, 2),
#                         kernel = c("rectangular", "gaussian", "cos"))
#
#kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
#                    trControl = t.ctrl, tuneGrid = kknn.grid,
#                    preProcess = c("center", "scale"))
#plot(kknn.train)
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train.df, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
